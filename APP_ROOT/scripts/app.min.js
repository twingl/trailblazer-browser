(function() {
  var OAuth2Authenticator;

  OAuth2Authenticator = SimpleAuth.Authenticators.Base.extend({
    restore: function(properties) {},
    authenticate: function(credentials) {
      return new Ember.RSVP.Promise(function(resolve, reject) {
        var authUrl, clientId, redirect, url;
        authUrl = "" + window.ENV['api_host'] + "/oauth/authorize";
        redirect = encodeURIComponent("https://" + chrome.runtime.id + ".chromiumapp.org/");
        clientId = "f2c3d77a1a31f9149d92c9c02a030787e4c4d3531727f5b6732e379454d246ed";
        url = "" + authUrl + "?client_id=" + clientId + "&response_type=token&redirect_uri=" + redirect;
        return chrome.identity.launchWebAuthFlow({
          'url': url,
          'interactive': true
        }, function(redirectUrl) {
          var i, item, response, responseObject, _i, _len, _ref;
          response = redirectUrl.substring(redirectUrl.indexOf("#") + 1);
          responseObject = {};
          _ref = response.split('&');
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            i = item.split('=');
            responseObject[i[0]] = i[1];
          }
          if (responseObject.access_token) {
            return resolve(responseObject);
          } else {
            return reject(responseObject);
          }
        });
      });
    },
    invalidate: function(data) {
      return new Ember.RSVP.Promise(function(resolve, reject) {
        var body, url;
        body = {
          token: data['access_token']
        };
        url = "" + window.ENV['api_host'] + "/oauth/revoke";
        return Ember.$.ajax({
          url: url,
          type: 'POST',
          data: body,
          dataType: 'json',
          contentType: 'application/x-www-form-urlencoded',
          error: reject,
          success: resolve
        });
      });
    }
  });

  Ember.Application.initializer({
    name: 'authentication',
    before: 'simple-auth',
    initialize: function(container, application) {
      return container.register('twingl:authenticators:oauth2', OAuth2Authenticator);
    }
  });

}).call(this);


/*
 * Configure SimpleAuth
 */

(function() {
  window.ENV || (window.ENV = {});

  window.ENV['default_page'] = "http://google.com";

  window.ENV['search_page'] = "http://google.com";

  window.ENV['api_host'] = "https://app.trailblazer.io";

  window.ENV['api_namespace'] = "api/v1";

  window.ENV['api_base'] = "" + window.ENV['api_host'] + "/" + window.ENV['api_namespace'];

  window.ENV['simple-auth'] = {
    store: 'simple-auth-session-store:ephemeral',
    authorizer: 'simple-auth-authorizer:oauth2-bearer',
    crossOriginWhitelist: [window.ENV['api_host']]
  };

  window.Twingl = Ember.Application.create({
    rootElement: "#app",
    ready: function() {
      return document.title = "Twingl Browser";
    },
    customEvents: {
      close: "webviewClose",
      consolemessage: "webviewConsoleMessage",
      contentload: "webviewContentLoad",
      dialog: "webviewClose",
      exit: "webviewExit",
      findupdate: "webviewFindUpdate",
      loadabort: "webviewLoadAbort",
      loadcommit: "webviewLoadCommit",
      loadredirect: "webviewLoadRedirect",
      loadstart: "webviewLoadStart",
      loadstop: "webviewLoadStop",
      newwindow: "webviewNewWindow",
      permissionrequest: "webviewPermissionRequest",
      responsive: "webviewResponsive",
      sizechanged: "webviewSizeChanged",
      unresponsive: "webviewUnresponsive",
      zoomchange: "webviewZoomChanged"
    }
  });

  Twingl.views || (Twingl.views = {});

}).call(this);

(function() {
  Twingl.ApplicationAdapter = DS.RESTAdapter.extend({
    namespace: window.ENV['api_namespace'],
    host: window.ENV['api_host']
  });

}).call(this);

(function() {
  Twingl.Assignment = DS.Model.extend({
    title: DS.attr('string'),
    description: DS.attr('string'),
    started_at: DS.attr('date'),
    completed_at: DS.attr('date'),
    current_node_id: DS.attr('number'),
    project_id: DS.attr('number')
  });

}).call(this);

(function() {
  Twingl.ApplicationController = Ember.Controller.extend({
    needs: ['tree', 'webview', 'navigation'],
    assignment: void 0,
    actions: {
      showAssignments: function() {
        this.set('assignment', void 0);
        this.get("controllers.tree").resetState();
        this.get("controllers.webview").resetState();
        this.get("controllers.navigation").resetState();
        return this.transitionToRoute('assignments');
      },
      resetState: function() {
        var c, _i, _len, _ref;
        _ref = this.needs;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          c = _ref[_i];
          this.get("controllers." + c).resetState();
        }
        return this.transitionToRoute('login');
      },
      minimizeWindow: function() {
        return chrome.app.window.current().minimize();
      },
      maximizeWindow: function() {
        console.log(chrome.app.window.current().isMaximized());
        if (chrome.app.window.current().isMaximized()) {
          return chrome.app.window.current().restore();
        } else {
          return chrome.app.window.current().maximize();
        }
      },
      closeWindow: function() {
        return chrome.app.window.current().close();
      }
    }
  });

}).call(this);

(function() {
  Twingl.AssignmentsController = Ember.Controller.extend({
    needs: ['application', 'tree'],
    actions: {
      setAssignment: function(assignment) {
        this.get("controllers.application").set("assignment", assignment);
        this.transitionToRoute('loading');
        return this.get("controllers.tree").send('loadHistory', (function(_this) {
          return function() {
            return _this.transitionToRoute('browser');
          };
        })(this));
      }
    }
  });

}).call(this);

(function() {
  Twingl.IndexController = Ember.Controller.extend();

}).call(this);

(function() {
  Twingl.LoginController = Ember.Controller.extend(SimpleAuth.LoginControllerMixin, {
    authenticator: 'twingl:authenticators:oauth2'
  });

}).call(this);

(function() {
  Twingl.NavigationController = Ember.Controller.extend({
    needs: ['webview', 'tree'],
    webview: Ember.computed.alias("controllers.webview"),
    tree: Ember.computed.alias("controllers.tree"),
    resetState: function() {
      this.set('loading', false);
      this.set('url', '');
      $('#tb-pane-alt').hide();
      $('#tb-pane-main').removeClass('blur');
      $('.tb-navigation-element-main').show();
      return $('.tb-navigation-element-alt').hide();
    },
    url: '',
    loading: false,
    actions: {

      /*
       * User instigated events - UI elements
       */
      navigateUrl: function() {
        return this.get('webview').navigate(this.get('url'));
      },
      navigateSearch: function() {
        return this.get('webview').navigate(window.ENV['search_page']);
      },
      navigateReload: function() {
        return this.get('webview').reload();
      },
      navigateHistoryBack: function() {
        var parent;
        if (parent = this.get('tree').parentNode()) {
          this.get('tree').updateCurrentNode(parent);
          return this.get('webview').navigate(parent.url, false);
        }
      },
      historyShow: function() {
        this.set('loading', false);
        $('#tb-pane-alt').show();
        $('#tb-pane-main').addClass('blur');
        $('.tb-navigation-element-main').hide();
        return $('.tb-navigation-element-alt').show(0, (function(_this) {
          return function() {
            return _this.get('tree').send('drawTree');
          };
        })(this));
      },
      browserShow: function() {
        $('#tb-pane-alt').hide();
        $('#tb-pane-main').removeClass('blur');
        $('.tb-navigation-element-main').show();
        return $('.tb-navigation-element-alt').hide();
      }
    }
  });

}).call(this);

(function() {
  Twingl.TreeController = Ember.Controller.extend({
    needs: ['application', 'navigation', 'webview'],
    application: Ember.computed.alias("controllers.application"),
    navigation: Ember.computed.alias("controllers.navigation"),
    webview: Ember.computed.alias("controllers.webview"),
    assignment: Ember.computed.alias("controllers.application.assignment"),
    historyStack: [],
    historyMap: {},
    resetState: function() {
      this.set("currentNodeId", void 0);
      this.set("historyStack", []);
      this.set("historyMap", {});
      this.set("currentViewCenter", [0, 0]);
      return this.set("currentViewScale", 0.2);
    },
    currentNodeId: void 0,
    currentNode: function() {
      return this.get("historyMap")[this.get("currentNodeId")];
    },
    parentNode: function() {
      return this.get("historyMap")[this.currentNode().parent_id];
    },
    currentViewCenter: [0, 0],
    currentViewScale: 0.2,
    d3data: {
      nodes: {
        size: 25
      },
      svg: void 0,
      force: d3.layout.force().size([100, 100]).charge(-1600).chargeDistance(1600).linkDistance(200).linkStrength(1).friction(0.8).gravity(0)
    },
    updateCurrentNode: function(node) {
      var id, url;
      this.set("currentNodeId", node.id);
      id = this.get('assignment').get('id');
      Ember.$.ajax("" + window.ENV['api_base'] + "/assignments/" + id, {
        method: "PUT",
        data: {
          assignment: {
            current_node_id: node.id
          }
        }
      });
      if (!node.visited_at) {
        return Ember.$.ajax(url = "" + window.ENV['api_base'] + "/nodes/" + node.id, {
          method: "PUT",
          data: {
            node: {
              arrived_at: (new Date()).toISOString()
            }
          }
        });
      }
    },

    /*
     * A sample node structure
     *
     * {
     *   id: ID, (assigned a temporary ID before the persisted ID is known)
     *   parent_id: ID, the parent node
     *   user_id: ID, assigned by the server
     *   url: String,
     *   title: String,
     *   arrived_at: Date,
     *   departed_at: Date,
     *   idle: Boolean
     * }
     *
     */
    generateTemporaryId: function() {
      return "TB.tmp." + Math.random().toString(36).substr(2, 9);
    },
    actions: {
      loadHistory: function(cb) {
        var id, url;
        id = this.get('assignment').get('id');
        url = "" + window.ENV['api_base'] + "/assignments/" + id + "/nodes";
        return Ember.$.get(url, (function(_this) {
          return function(response) {
            var currentNodeId, node, _i, _len, _ref;
            if (response.nodes.length > 0) {
              _ref = response.nodes;
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                node = _ref[_i];
                _this.get('historyStack').push(node);
                _this.get('historyMap')[node.id] = node;
              }
              currentNodeId = _this.get('assignment').get('current_node_id');
              if (currentNodeId && _this.get('historyMap').hasOwnProperty(currentNodeId)) {
                _this.set('currentNodeId', _this.get('assignment').get('current_node_id'));
              } else {
                _this.set('currentNodeId', _this.get('historyStack').filterBy("arrived_at")[0].id);
              }
              setTimeout((function() {
                return _this.get('navigation').send('historyShow');
              }), 40);
              _this.get('webview').navigate(_this.currentNode().url, false);
            } else {
              _this.get('webview').navigate(window.ENV['default_page']);
            }
            console.log(_this.get('historyStack'), _this.get('historyMap'));
            return cb();
          };
        })(this));
      },
      pushItem: function(node) {
        var id, temporaryId, url;
        id = this.get('assignment').get('id');
        url = "" + window.ENV['api_base'] + "/assignments/" + id + "/nodes";
        temporaryId = this.generateTemporaryId();
        node = Ember.$.extend(node, {
          id: temporaryId,
          parent_id: this.get('currentNodeId'),
          arrived_at: (new Date()).toISOString(),
          idle: false
        });
        Ember.$.post(url, {
          node: node
        }, (function(_this) {
          return function(response) {
            node.id = response.id;
            _this.get("historyMap")[node.id] = node;
            delete _this.get("historyMap")[temporaryId];
            return _this.updateCurrentNode(node);
          };
        })(this));
        this.get("historyStack").push(node);
        this.get("historyMap")[node.id] = node;
        this.get("historyMap")[node.id].x = this.get("historyMap")[this.get("currentNodeId")].x;
        this.get("historyMap")[node.id].y = this.get("historyMap")[this.get("currentNodeId")].y;
        return console.log(this.get('historyStack'), this.get('historyMap'));
      },
      queueUnread: function(node) {
        var id, temporaryId, url;
        id = this.get('assignment').get('id');
        url = "" + window.ENV['api_base'] + "/assignments/" + id + "/nodes";
        temporaryId = this.generateTemporaryId();
        node = Ember.$.extend(node, {
          id: temporaryId,
          parent_id: this.get('currentNodeId'),
          idle: false
        });
        Ember.$.post(url, {
          node: node
        }, (function(_this) {
          return function(response) {
            var w;
            node.id = response.id;
            _this.get("historyMap")[node.id] = node;
            delete _this.get("historyMap")[temporaryId];
            if (!node.title) {
              w = document.createElement("webview");
              w.src = node.url;
              w.addEventListener("contentload", function(evt) {
                console.log("contentload", evt);
                return w.executeScript({
                  code: "document.title"
                }, function(r) {
                  document.body.removeChild(w);
                  _this.get("historyMap")[node.id].title = r[0];
                  return Ember.$.ajax("" + window.ENV['api_base'] + "/nodes/" + node.id, {
                    method: "PUT",
                    data: {
                      node: {
                        title: r[0]
                      }
                    }
                  });
                });
              });
              return document.body.appendChild(w);
            }
          };
        })(this));
        this.get("historyStack").push(node);
        return this.get("historyMap")[node.id] = node;
      },

      /*
       * Rendering the graph
       */
      drawTree: function() {
        Ember.$("#tb-history-tree-viz").html('');
        this.get("d3data").svg = d3.select('#tb-history-tree-viz').append('svg');
        if (this.get("historyStack").length > 0) {
          return this.update();
        }
      }
    },
    update: function() {
      var container, force, history, id, idMap, index, label, link, links, map, node, nodes, pan, poly, svg, zoom;
      map = this.get("historyMap");
      history = $.extend(true, {}, map);
      console.log(history);
      links = [];
      nodes = [];
      idMap = {};
      index = 0;
      for (id in history) {
        node = history[id];
        idMap[node.id] = index++;
        if (!node.x) {
          node.x = 50;
        }
        if (!node.y) {
          node.y = 50;
        }
        node.offsets = {
          x: this.get('d3data').nodes.size * 2,
          y: {
            minor: this.get('d3data').nodes.size * 1.1,
            major: this.get('d3data').nodes.size * 2.3
          }
        };
        if (node.parent_id) {
          links.push({
            source: idMap[node.parent_id],
            target: idMap[node.id]
          });
        } else {
          node.x = 50;
          node.y = 50;
          node.fixed = true;
        }
        nodes.push(node);
      }
      force = this.get('d3data').force;
      svg = this.get('d3data').svg;
      container = svg.append("g");
      zoom = d3.behavior.zoom().scaleExtent([0.2, 2]).on("zoom", (function(_this) {
        return function() {
          _this.set('currentViewCenter', [(window.innerWidth / 2) - d3.event.translate[0], (window.innerHeight / 2) - d3.event.translate[1] - 64]);
          _this.set('currentViewScale', d3.event.scale);
          return container.transition().duration(100).ease(d3.ease("cubic-out")).attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
        };
      })(this));
      svg.call(zoom);
      force.nodes(nodes).links(links).start();
      link = container.selectAll(".link").data(links).enter().append("line").attr("class", "link");
      node = container.selectAll('g.node').data(nodes, function(d) {
        return d.id;
      }).enter().append("g").attr("class", (function(_this) {
        return function(d) {
          return "node " + ("" + (!d.arrived_at ? "unread" : void 0) + " ") + ("" + (d.id === _this.get('currentNodeId') ? "current" : void 0) + " ");
        };
      })(this));
      pan = (function(_this) {
        return function(duration) {
          if (duration == null) {
            duration = 300;
          }
          zoom.translate([(window.innerWidth / 2) - _this.get('currentViewCenter')[0], (window.innerHeight / 2) - _this.get('currentViewCenter')[1] - 64]);
          zoom.scale(_this.get('currentViewScale'));
          return container.transition().duration(duration).ease(d3.ease("cubic-out")).attr("transform", "translate(" + [(window.innerWidth / 2) - _this.get('currentViewCenter')[0], (window.innerHeight / 2) - _this.get('currentViewCenter')[1] - 64] + ")scale(" + (_this.get('currentViewScale')) + ")");
        };
      })(this);
      pan(0);
      window.onresize = _.debounce(((function(_this) {
        return function() {
          return pan(0);
        };
      })(this)), 20);
      node.on("click", (function(_this) {
        return function(d) {
          _this.updateCurrentNode(d);
          return _this.get('webview').navigate(d.url, false);
        };
      })(this));
      poly = node.append("polygon").attr("stroke-linejoin", "round");
      label = node.append("foreignObject").attr("requiredFeatures", "http://www.w3.org/TR/SVG11/feature#Extensibility").attr("x", 0).attr("y", 0).attr("width", this.get('d3data').nodes.size * 4).attr("height", this.get('d3data').nodes.size * 2.2);
      label.append("xhtml:body").append("p").text(function(d) {
        return d.title;
      });
      force.on("tick", (function(_this) {
        return function() {
          link.attr("x1", function(d) {
            return d.source.x;
          }).attr("y1", function(d) {
            return d.source.y;
          }).attr("x2", function(d) {
            return d.target.x;
          }).attr("y2", function(d) {
            return d.target.y;
          });
          poly.attr("points", function(d) {
            return ("" + (d.x + d.offsets.x) + "," + (d.y + d.offsets.y.minor) + " ") + ("" + (d.x + d.offsets.x) + "," + (d.y - d.offsets.y.minor) + " ") + ("" + d.x + "," + (d.y - d.offsets.y.major) + " ") + ("" + (d.x - d.offsets.x) + "," + (d.y - d.offsets.y.minor) + " ") + ("" + (d.x - d.offsets.x) + "," + (d.y + d.offsets.y.minor) + " ") + ("" + d.x + "," + (d.y + d.offsets.y.major) + " ");
          });
          return label.attr("x", function(d) {
            return d.x - d.offsets.x;
          }).attr("y", function(d) {
            return d.y - d.offsets.y.minor;
          });
        };
      })(this));
      return force.on("end", (function(_this) {
        return function() {
          var o;
          o = {};
          _.each(nodes, function(n) {
            _this.get('historyMap')[n.id].x = n.x;
            _this.get('historyMap')[n.id].y = n.y;
            return o[n.id] = {
              x: n.x,
              y: n.y
            };
          });
          return Ember.$.ajax("" + window.ENV['api_base'] + "/assignments/" + (_this.get('assignment').id) + "/nodes/coords", {
            method: "PUT",
            contentType: "application/json",
            data: JSON.stringify({
              nodes: o
            })
          });
        };
      })(this));
    }
  });

}).call(this);

(function() {
  Twingl.WebviewController = Ember.Controller.extend({

    /*
     * This Controller is responsible for actioning navigation events and catching
     * the events emitted by the <webview>, filtering, and bubbling on appropriate
     * events to NavigationController so that it can manage the state effectively.
     */
    needs: ['navigation', 'tree'],
    navigation: Ember.computed.alias("controllers.navigation"),
    tree: Ember.computed.alias("controllers.tree"),
    currentNode: Ember.computed.alias("controllers.tree.currentNode"),
    resetState: function() {
      this.set('url', '');
      return this.set('state', void 0);
    },
    state: void 0,
    states: {
      "default": 0,
      nav_tree: 1,
      nav_browser: 2
    },
    updateTree: function(node) {
      switch (this.state) {
        case this.states.nav_tree:
          console.log("nav_tree");
          return this.state = this.states["default"];
        case this.states.nav_browser:
          console.log("nav_browser");
          return this.state = this.states["default"];
        default:
          console.log("nav_default");
          this.get('tree').send('pushItem', {
            url: node.url,
            title: node.title
          });
          return this.state = this.states["default"];
      }
    },
    url: '',
    navigate: function(url, triggerNewNode) {
      if (triggerNewNode == null) {
        triggerNewNode = true;
      }
      if (!triggerNewNode) {
        this.set('state', this.states.nav_tree);
      }
      this.set('url', url);
      return Ember.$('#tb-pane-main webview').attr('src', url);
    },
    navigateForward: function() {
      return $('#tb-pane-main webview')[0].forward();
    },
    navigateBack: function() {
      return $('#tb-pane-main webview')[0].back();
    },
    reload: function() {
      return $('#tb-pane-main webview')[0].reload();
    },
    actions: {
      loadStart: function(e) {
        return this.get('navigation').set('loading', true);
      },
      loadStop: function(e) {
        return this.get('navigation').set('loading', false);
      },
      loadCommit: function(e) {
        if (e.originalEvent.isTopLevel && this.get('currentNode').url !== e.originalEvent.url) {
          return Ember.$('#tb-pane-main webview')[0].executeScript({
            code: "document.title"
          }, (function(_this) {
            return function(r) {
              e.originalEvent.title = r[0];
              _this.updateTree(e.originalEvent);
              return _this.get('navigation').set('url', e.originalEvent.url);
            };
          })(this));
        }
      },
      loadRedirect: function(e) {
        if (e.originalEvent.isTopLevel) {
          return this.get('navigation').set('url', e.originalEvent.url);
        }
      },
      newWindow: function(e) {
        return this.get('tree').send('queueUnread', {
          url: e.originalEvent.targetUrl
        });
      }
    }
  });

}).call(this);

(function() {
  Twingl.AssignmentListItem = Ember.Component.extend({
    tagName: 'li',
    classNames: [],
    action: "setAssignment",
    layoutName: "main/assignments/list_item",
    click: function() {
      return this.sendAction('action', this.assignment);
    }
  });

}).call(this);

(function() {
  Twingl.AssignmentSwitcher = Ember.Component.extend({
    tagName: "button",
    classNames: ["tb-assignment-switch", "tb-window-nav"],
    action: "showAssignments",
    layoutName: "windowNavigation/assignment_switcher",
    click: function() {
      return this.sendAction();
    }
  });

}).call(this);

(function() {
  Twingl.BrowserBackButton = Ember.Component.extend({
    tagName: "i",
    classNames: ["tb-history-back", "tb-nav-button", "fa", "fa-arrow-circle-left"],
    action: "navigateHistoryBack",
    click: function() {
      return this.sendAction();
    }
  });

}).call(this);

(function() {
  Twingl.BrowserShowButton = Ember.Component.extend({
    tagName: "i",
    classNames: ["tb-browser-show", "tb-nav-button", "fa", "fa-globe"],
    action: "browserShow",
    click: function() {
      return this.sendAction();
    }
  });

}).call(this);

(function() {
  Twingl.HistoryReloadButton = Ember.Component.extend({
    tagName: 'button',
    classNames: ['tb-history-reload', 'tb-nav-button'],
    action: "navigateReload",
    layoutName: "button",
    text: "Reload",
    click: function() {
      return this.sendAction();
    }
  });

}).call(this);

(function() {
  Twingl.HistoryShowButton = Ember.Component.extend({
    tagName: "i",
    classNames: ["tb-history-show", "tb-nav-button", "fa", "fa-share-alt"],
    action: "historyShow",
    click: function() {
      return this.sendAction();
    }
  });

}).call(this);

(function() {
  Twingl.LogoutButton = Ember.Component.extend({
    tagName: "i",
    classNames: ["tb-auth-logout", "tb-nav-button", "fa", "fa-sign-out"],
    action: "invalidateSession",
    click: function() {
      return this.sendAction();
    }
  });

}).call(this);

(function() {
  Twingl.SearchButton = Ember.Component.extend({
    tagName: "i",
    classNames: ["tb-search-show", "tb-nav-button", "fa", "fa-search"],
    action: "navigateSearch",
    click: function() {
      return this.sendAction();
    }
  });

}).call(this);

(function() {
  Twingl.UrlSubmitButton = Ember.Component.extend({
    tagName: 'button',
    classNames: ['tb-url-submit', 'tb-nav-button'],
    action: "navigateUrl",
    layoutName: "button",
    text: "Go",
    click: function() {
      return this.sendAction();
    }
  });

}).call(this);

(function() {
  Twingl.UrlTextField = Ember.TextField.extend({
    classNames: ['tb-url-input'],
    placeholder: 'http://example.com',
    action: "navigateUrl",
    attributeBindings: ['value'],
    insertNewline: function() {
      return this.sendAction();
    }
  });

}).call(this);

(function() {
  Twingl.Webview = Ember.View.extend({
    tagName: 'webview',
    attributeBindings: ['src'],
    webviewLoadCommit: function(evt) {
      return this.get('controller').send('loadCommit', evt);
    },
    webviewLoadRedirect: function(evt) {
      return this.get('controller').send('loadRedirect', evt);
    },
    webviewLoadStart: function(evt) {
      return this.get('controller').send('loadStart', evt);
    },
    webviewLoadStop: function(evt) {
      return this.get('controller').send('loadStop', evt);
    },
    webviewNewWindow: function(evt) {
      return this.get('controller').send('newWindow', evt);
    }
  });

}).call(this);

(function() {
  Twingl.WindowCloseButton = Ember.Component.extend({
    tagName: "i",
    classNames: ["tb-window-close", "tb-chrome-button", "fa", "fa-times"],
    action: "closeWindow",
    click: function() {
      return this.sendAction();
    }
  });

}).call(this);

(function() {
  Twingl.WindowMaximizeButton = Ember.Component.extend({
    tagName: "i",
    classNames: ["tb-window-maximize", "tb-chrome-button", "fa", "fa-plus"],
    action: "maximizeWindow",
    click: function() {
      return this.sendAction();
    }
  });

}).call(this);

(function() {
  Twingl.WindowMinimizeButton = Ember.Component.extend({
    tagName: "i",
    classNames: ["tb-window-minimize", "tb-chrome-button", "fa", "fa-minus"],
    action: "minimizeWindow",
    click: function() {
      return this.sendAction();
    }
  });

}).call(this);

(function() {
  Twingl.ApplicationRoute = Ember.Route.extend(SimpleAuth.ApplicationRouteMixin, {
    actions: {
      sessionAuthenticationSucceeded: function() {
        console.log("logged in");
        return this.transitionTo('assignments');
      },
      sessionAuthenticationFailed: function(error) {
        return console.log("failed to log in", error);
      },
      authorizationFailed: function(error) {
        return console.log("failed to authorize", error);
      },
      sessionInvalidationSucceeded: function() {
        console.log("logged out");
        return this.get('controller').send('resetState');
      },
      sessionInvalidationFailed: function(error) {
        return console.log("failed to log out", error);
      }
    }
  });

}).call(this);

(function() {
  Twingl.AssignmentsRoute = Ember.Route.extend(SimpleAuth.AuthenticatedRouteMixin, {
    model: function() {
      return this.store.findAll('assignment');
    },
    renderTemplate: function() {
      this.render('main/assignments/index', {
        outlet: 'main',
        controller: 'assignments'
      });
      return this.render('navigation/assignments', {
        outlet: 'navigation',
        controller: 'navigation'
      });
    }
  });

}).call(this);

(function() {
  Twingl.BrowserRoute = Ember.Route.extend(SimpleAuth.AuthenticatedRouteMixin, {
    renderTemplate: function() {
      this.render('main/webview', {
        outlet: 'main',
        controller: 'webview'
      });
      this.render('navigation/browser', {
        outlet: 'navigation',
        controller: 'navigation'
      });
      this.render('alt/tree', {
        outlet: 'alt',
        controller: 'tree'
      });
      return this.render('windowNavigation/projects', {
        outlet: 'windowNavigation',
        controller: 'application'
      });
    }
  });

}).call(this);

(function() {
  Twingl.IndexRoute = Ember.Route.extend({
    beforeModel: function() {
      return this.transitionTo('login');
    }
  });

}).call(this);

(function() {
  Twingl.LoadingRoute = Ember.Route.extend({
    renderTemplate: function() {
      return this.render('main/loading', {
        outlet: 'main'
      });
    }
  });

}).call(this);

(function() {
  Twingl.LoginRoute = Ember.Route.extend({
    renderTemplate: function() {
      return this.render('main/auth/login', {
        outlet: 'main',
        controller: 'login'
      });
    }
  });

}).call(this);

(function() {
  Twingl.Router.map(function() {
    this.route('assignments');
    this.route('browser');
    this.route('loading');
    return this.route('login');
  });

}).call(this);

(function() {


}).call(this);
