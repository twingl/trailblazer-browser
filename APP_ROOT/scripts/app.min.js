(function() {
  window.Twingl = Ember.Application.create({
    rootElement: "#app",
    customEvents: {
      close: "webviewClose",
      consolemessage: "webviewConsoleMessage",
      contentload: "webviewContentLoad",
      dialog: "webviewClose",
      exit: "webviewExit",
      findupdate: "webviewFindUpdate",
      loadabort: "webviewLoadAbort",
      loadcommit: "webviewLoadCommit",
      loadredirect: "webviewLoadRedirect",
      loadstart: "webviewLoadStart",
      loadstop: "webviewLoadStop",
      newwindow: "webviewNewWindow",
      permissionrequest: "webviewPermissionRequest",
      responsive: "webviewResponsive",
      sizechanged: "webviewSizeChanged",
      unresponsive: "webviewUnresponsive",
      zoomchange: "webviewZoomChanged"
    }
  });

  Twingl.views || (Twingl.views = {});

}).call(this);

(function() {
  Twingl.IndexController = Ember.Controller.extend();

}).call(this);

(function() {
  Twingl.NavigationController = Ember.Controller.extend({

    /*
     * This Controller is responsible for setting and clearing the necessary state
     * so we can mutate the tree correctly based on the events emitted by the
     * <webview>
     */
    needs: ['webview', 'tree'],
    webview: Ember.computed.alias("controllers.webview"),
    tree: Ember.computed.alias("controllers.tree"),
    url: '',
    loading: false,
    state: void 0,
    cOb: function() {
    console.log("(navCtrl) this.url: ", this.get('url'))
  }.observes('url'),
    states: {
      "default": 0,
      nav_url: 1,
      hist_back: 2,
      hist_forward: 3,
      nav_tree: 4,
      nav_browser: 5
    },
    updateTree: function(url) {
      switch (this.state) {
        case this.states.nav_url:
          this.get('tree').send('newRoot', url);
          return this.state = this.states["default"];
        case this.states.hist_back:
          if (url !== this.get('url')) {
            this.get('tree').send('historyPush');
            return this.state = this.states["default"];
          }
          break;
        case this.states.hist_forward:
          this.get('tree').send('historyPop');
          return this.state = this.states["default"];
        case this.states.nav_tree:
          return this.state = this.states["default"];
        case this.states.nav_browser:
          return this.state = this.states["default"];
        default:
          this.get('tree').send('advance', url);
          return this.state = this.states["default"];
      }
    },
    actions: {

      /*
       * User instigated events
       */
      navigateUrl: function() {
        this.set('state', this.states.nav_url);
        return this.get('webview').navigate(this.get('url'));
      },
      navigateHistoryBack: function() {
        this.set('state', this.states.hist_back);
        return this.get('webview').navigateBack();
      },
      navigateHistoryForward: function() {
        this.set('state', this.states.hist_forward);
        return this.get('webview').navigateForward();
      },
      navigateReload: function() {
        return this.get('webview').reload();
      },
      jumpToUrl: function(url) {
        return console.log("[STUB] jumpToUrl: " + url);
      },
      historyShow: function() {
        console.log(this.get('url'), this.get('webview').get('url'), $('webview').attr('src'));
        this.set('loading', false);
        this.set('state', this.states.nav_tree);
        $('#t-pane-main').hide();
        $('#t-pane-alt').show();
        $('.t-navigation-element-main').hide();
        return $('.t-navigation-element-alt').show(0, (function(_this) {
          return function() {
            return _this.get('tree').send('drawTree');
          };
        })(this));
      },
      browserShow: function() {
        console.log(this.get('url'), this.get('webview').get('url'), $('webview').attr('src'));
        this.set('state', this.states.nav_browser);
        $('#t-pane-main').show();
        $('#t-pane-alt').hide();
        $('.t-navigation-element-main').show();
        return $('.t-navigation-element-alt').hide();
      },

      /*
       * Filtered <webview> instigated events
       */
      loadCommit: function(e) {
        this.updateTree(e.originalEvent.url);
        return this.set('url', e.originalEvent.url);
      },
      loadRedirect: function(e) {
        return this.set('url', e.originalEvent.url);
      },
      newWindow: function(e) {
        return this.get('tree').send('newChild', e.originalEvent.targetUrl);
      }
    }
  });

}).call(this);

(function() {
  Twingl.TreeController = Ember.Controller.extend({
    needs: ['navigation'],
    currentNode: {},
    historyStack: [],
    currentNodeId: 0,

    /*
     * {
     *   id: ID,
     *   root: Boolean, //Indicates if the item is a root item or direct child
     *   parent: ID,
     *   children: [ ... ],
     *   visited: [
     *     {
     *       start: Date,
     *       finish: Date,
     *       idle: Boolean
     *     },
     *     ...
     *   ],
     *   url: String,
     *   created_at: Date
     * }
     */
    cOb: function() {
    console.log("this.currentNode: ", this.get('currentNode'))
  }.observes('currentNode'),
    hOb: function() {
    console.log("this.historyTree: ", this.get('historyTree'))
  }.observes('historyTree'),
    historyTree: void 0,
    d3data: {
      svg: void 0,
      height: 800,
      width: 600,
      tree: d3.layout.tree().size([800, 600]),
      diagonal: d3.svg.diagonal().projection(function(d) {
        return [d.y, d.x];
      })
    },
    update: function() {
      var link, links, node, nodeEnter, nodes;
      nodes = this.get('d3data').tree.nodes(this.get('historyTree')).reverse();
      links = this.get('d3data').tree.links(nodes);
      node = this.get('d3data').svg.selectAll('g.node').data(nodes, function(d) {
        return d.id;
      });
      nodeEnter = node.enter().append("g").attr("class", "node").attr("transform", function(d) {
        return "translate(" + d.y + ", " + d.x + ")";
      });
      nodeEnter.append("circle").attr("r", "4px").style("fill", "red");
      nodeEnter.append("text").attr("x", -10).attr("dy", ".35em").attr("text-anchor", "end").text(function(d) {
        return d.url;
      });
      link = this.get('d3data').svg.selectAll("path.link").data(links, function(d) {
        return d.target.id;
      });
      return link.enter().insert("path", "g").attr("class", "link").attr("d", this.get('d3data').diagonal);
    },
    actions: {
      drawTree: function() {
        document.getElementById('t-history-tree-viz').innerHTML = '';
        this.get('d3data').svg = d3.select('#t-history-tree-viz').append('svg');
        if (this.get('historyTree')) {
          this.update();
          return svgPanZoom.init({
            'selector': '#t-history-tree-viz>svg'
          });
        }
      },
      newRoot: function(url) {
        var node, _base;
        node = {
          id: ++this.currentNodeId,
          root: true,
          parent: void 0,
          children: [],
          visited: [
            {
              start: Date.now(),
              finish: void 0,
              idle: false
            }
          ],
          url: url,
          created_at: Date.now()
        };
        if (!this.get('historyTree')) {
          this.set('historyTree', node);
          this.set('currentNode', node);
          return console.log("New Root! " + url);
        } else {
          node.parent = this.get('currentNode');
          (_base = this.get('currentNode')).children || (_base.children = []);
          this.get('currentNode').children.push(node);
          this.set('currentNode', node);
          return console.log("Creating new pseudo-root node: " + url);
        }
      },
      newChild: function(url) {
        var node, _base;
        (_base = this.get('currentNode')).children || (_base.children = []);
        if (this.get('currentNode').children.filterBy('url', url).length === 0) {
          node = {
            id: ++this.currentNodeId,
            root: false,
            parent: this.get('currentNode'),
            children: [],
            visited: [],
            url: url,
            created_at: Date.now()
          };
          this.get('currentNode').children.push(node);
          return console.log("Creating child node: " + url);
        } else {
          return console.log("Child node exists: " + url);
        }
      },
      advance: function(url) {
        var node, _base, _base1;
        (_base = this.get('currentNode')).children || (_base.children = []);
        if (this.get('currentNode').children.filterBy('url', url).length === 0) {
          node = {
            id: ++this.currentNodeId,
            root: false,
            parent: this.get('currentNode'),
            children: [],
            visited: [
              {
                start: Date.now(),
                finish: void 0,
                idle: false
              }
            ],
            url: url,
            created_at: Date.now()
          };
          (_base1 = this.get('currentNode')).children || (_base1.children = []);
          this.get('currentNode').children.push(node);
          this.set('currentNode', node);
          return console.log("Advancing to new node: " + url);
        } else {
          node = this.get('currentNode').children.filterBy('url', url).pop();
          node.visited.push({
            start: Date.now(),
            finish: void 0,
            idle: false
          });
          this.set('currentNode', node);
          return console.log("Advancing to existing node: " + url);
        }
      },
      historyPop: function() {
        var p;
        p = this.get('historyStack').pop();
        if (p) {
          this.set('currentNode', p);
          return console.log("Pop - moving forward one node");
        } else {
          return console.log("ohfuck no history to go to");
        }
      },
      historyPush: function() {
        var p;
        p = this.get('currentNode').parent;
        if (p) {
          this.get('historyStack').push(this.get('currentNode'));
          this.set('currentNode', p);
          return console.log("Push - moving back one node");
        } else {
          return console.log("ohfuck no parent");
        }
      }
    }
  });

}).call(this);

(function() {
  Twingl.WebviewController = Ember.Controller.extend({

    /*
     * This Controller is responsible for actioning navigation events and catching
     * the events emitted by the <webview>, filtering, and bubbling on appropriate
     * events to NavigationController so that it can manage the state effectively.
     */
    needs: ['navigation'],
    navigation: Ember.computed.alias("controllers.navigation"),
    url: '',
    navigate: function(url) {
      return this.set('url', url);
    },
    navigateForward: function() {
      return $('webview')[0].forward();
    },
    navigateBack: function() {
      return $('webview')[0].back();
    },
    reload: function() {
      return $('webview')[0].reload();
    },
    actions: {
      loadStart: function(e) {
        return this.get('navigation').set('loading', true);
      },
      loadStop: function(e) {
        return this.get('navigation').set('loading', false);
      },
      loadRedirect: function(e) {
        if (e.originalEvent.isTopLevel) {
          return this.get('navigation').send('loadRedirect', e);
        }
      },
      loadCommit: function(e) {
        if (e.originalEvent.isTopLevel) {
          $('webview')[0].executeScript({
            code: "document.title"
          }, (function(_this) {
            return function(r) {
              return document.title = r[0];
            };
          })(this));
          return this.get('navigation').send('loadCommit', e);
        }
      },
      newWindow: function(e) {
        return this.get('navigation').send('newWindow', e);
      }
    }
  });

}).call(this);

(function() {
  Twingl.BrowserShowButton = Ember.Component.extend({
    tagName: 'button',
    classNames: ['t-browser-show', 't-nav-button'],
    action: "browserShow",
    layoutName: "button",
    text: "Back",
    click: function() {
      return this.sendAction();
    }
  });

}).call(this);

(function() {
  Twingl.HistoryBackButton = Ember.Component.extend({
    tagName: 'button',
    classNames: ['t-history-back', 't-nav-button'],
    action: "navigateHistoryBack",
    layoutName: "button",
    text: "Back",
    click: function() {
      return this.sendAction();
    }
  });

}).call(this);

(function() {
  Twingl.HistoryForwardButton = Ember.Component.extend({
    tagName: 'button',
    classNames: ['t-history-forward', 't-nav-button'],
    action: "navigateHistoryForward",
    layoutName: "button",
    text: "Forward",
    click: function() {
      return this.sendAction();
    }
  });

}).call(this);

(function() {
  Twingl.HistoryReloadButton = Ember.Component.extend({
    tagName: 'button',
    classNames: ['t-history-reload', 't-nav-button'],
    action: "navigateReload",
    layoutName: "button",
    text: "Reload",
    click: function() {
      return this.sendAction();
    }
  });

}).call(this);

(function() {
  Twingl.HistoryShowButton = Ember.Component.extend({
    tagName: 'button',
    classNames: ['t-history-show', 't-nav-button'],
    action: "historyShow",
    layoutName: "button",
    text: "History",
    click: function() {
      return this.sendAction();
    }
  });

}).call(this);

(function() {
  Twingl.UrlSubmitButton = Ember.Component.extend({
    tagName: 'button',
    classNames: ['t-url-submit', 't-nav-button'],
    action: "navigateUrl",
    layoutName: "button",
    text: "Go",
    click: function() {
      return this.sendAction();
    }
  });

}).call(this);

(function() {
  Twingl.UrlTextField = Ember.TextField.extend({
    classNames: ['t-url-input'],
    placeholder: 'http://example.com',
    action: "navigateUrl",
    attributeBindings: ['value'],
    insertNewline: function() {
      return this.sendAction();
    }
  });

}).call(this);

(function() {
  Twingl.Webview = Ember.View.extend({
    tagName: 'webview',
    attributeBindings: ['src'],
    webviewLoadCommit: function(evt) {
      return this.get('controller').send('loadCommit', evt);
    },
    webviewLoadRedirect: function(evt) {
      return this.get('controller').send('loadRedirect', evt);
    },
    webviewLoadStart: function(evt) {
      return this.get('controller').send('loadStart', evt);
    },
    webviewLoadStop: function(evt) {
      return this.get('controller').send('loadStop', evt);
    },
    webviewNewWindow: function(evt) {
      return this.get('controller').send('newWindow', evt);
    }
  });

}).call(this);

(function() {
  Twingl.IndexRoute = Ember.Route.extend({
    renderTemplate: function() {
      this.render('browser/main', {
        outlet: 'main',
        controller: 'webview'
      });
      this.render('navigation/browser', {
        outlet: 'navigation',
        controller: 'navigation'
      });
      return this.render('alt/tree', {
        outlet: 'alt',
        controller: 'tree'
      });
    }
  });

}).call(this);

(function() {


}).call(this);
