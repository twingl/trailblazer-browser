(function() {
  var OAuth2Authenticator;

  OAuth2Authenticator = SimpleAuth.Authenticators.Base.extend({
    restore: function(properties) {},
    authenticate: function(credentials) {
      return new Ember.RSVP.Promise(function(resolve, reject) {
        var authUrl, clientId, redirect, url;
        authUrl = "http://localhost:3000/oauth/authorize";
        redirect = encodeURIComponent("https://" + chrome.runtime.id + ".chromiumapp.org/");
        clientId = "3e28871e11e0f4bf55e464bc20cd1774eb8da855a470b5eda766fed6f78943f3";
        url = "" + authUrl + "?client_id=" + clientId + "&response_type=token&redirect_uri=" + redirect;
        return chrome.identity.launchWebAuthFlow({
          'url': url,
          'interactive': true
        }, function(redirectUrl) {
          var accessToken, i, item, o, _i, _len, _ref;
          accessToken = redirectUrl.substring(redirectUrl.indexOf("#") + 1);
          o = {};
          _ref = accessToken.split('&');
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            i = item.split('=');
            o[i[0]] = i[1];
          }
          return resolve(o);
        });
      });
    },
    invalidate: function(data) {
      return new Ember.RSVP.Promise(function(resolve, reject) {
        var body, url;
        body = {
          token: data['access_token']
        };
        url = "http://localhost:3000/oauth/revoke";
        return Ember.$.ajax({
          url: url,
          type: 'POST',
          data: body,
          dataType: 'json',
          contentType: 'application/x-www-form-urlencoded',
          error: reject,
          success: resolve
        });
      });
    }
  });

  Ember.Application.initializer({
    name: 'authentication',
    before: 'simple-auth',
    initialize: function(container, application) {
      return container.register('twingl:authenticators:oauth2', OAuth2Authenticator);
    }
  });

}).call(this);


/*
 * Configure SimpleAuth
 */

(function() {
  window.ENV || (window.ENV = {});

  window.ENV['simple-auth'] = {
    store: 'simple-auth-session-store:ephemeral',
    authorizer: 'simple-auth-authorizer:oauth2-bearer',
    crossOriginWhitelist: ['http://localhost:3000']
  };

  window.Twingl = Ember.Application.create({
    rootElement: "#app",
    ready: function() {
      return document.title = "Twingl Browser";
    },
    customEvents: {
      close: "webviewClose",
      consolemessage: "webviewConsoleMessage",
      contentload: "webviewContentLoad",
      dialog: "webviewClose",
      exit: "webviewExit",
      findupdate: "webviewFindUpdate",
      loadabort: "webviewLoadAbort",
      loadcommit: "webviewLoadCommit",
      loadredirect: "webviewLoadRedirect",
      loadstart: "webviewLoadStart",
      loadstop: "webviewLoadStop",
      newwindow: "webviewNewWindow",
      permissionrequest: "webviewPermissionRequest",
      responsive: "webviewResponsive",
      sizechanged: "webviewSizeChanged",
      unresponsive: "webviewUnresponsive",
      zoomchange: "webviewZoomChanged"
    }
  });

  Twingl.views || (Twingl.views = {});

}).call(this);

(function() {
  Twingl.ApplicationAdapter = DS.RESTAdapter.extend({
    namespace: 'api/v1',
    host: 'http://localhost:3000'
  });

}).call(this);

(function() {
  Twingl.Assignment = DS.Model.extend({
    name: DS.attr('string'),
    started_at: DS.attr('date'),
    completed_at: DS.attr('date')
  });

}).call(this);

(function() {
  Twingl.ApplicationController = Ember.Controller.extend({
    needs: ['tree', 'webview', 'navigation'],
    assignment: void 0,
    actions: {
      showAssignments: function() {
        this.set('assignment', void 0);
        this.get("controllers.tree").resetState();
        this.get("controllers.webview").resetState();
        return this.transitionToRoute('assignments');
      },
      resetState: function() {
        var c, _i, _len, _ref;
        _ref = this.needs;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          c = _ref[_i];
          this.get("controllers." + c).resetState();
        }
        return this.transitionToRoute('login');
      },
      minimizeWindow: function() {
        return chrome.app.window.current().minimize();
      },
      maximizeWindow: function() {
        console.log(chrome.app.window.current().isMaximized());
        if (chrome.app.window.current().isMaximized()) {
          return chrome.app.window.current().restore();
        } else {
          return chrome.app.window.current().maximize();
        }
      },
      closeWindow: function() {
        return chrome.app.window.current().close();
      }
    }
  });

}).call(this);

(function() {
  Twingl.AssignmentsController = Ember.Controller.extend({
    needs: ['application'],
    actions: {
      setAssignment: function(assignment) {
        this.get("controllers.application").set("assignment", assignment);
        return this.transitionToRoute('browser');
      }
    }
  });

}).call(this);

(function() {
  Twingl.IndexController = Ember.Controller.extend();

}).call(this);

(function() {
  Twingl.LoginController = Ember.Controller.extend(SimpleAuth.LoginControllerMixin, {
    authenticator: 'twingl:authenticators:oauth2'
  });

}).call(this);

(function() {
  Twingl.NavigationController = Ember.Controller.extend({
    needs: ['webview', 'tree'],
    webview: Ember.computed.alias("controllers.webview"),
    tree: Ember.computed.alias("controllers.tree"),
    resetState: function() {
      this.set('url', '');
      this.set('loading', false);
      return this.set('state', void 0);
    },
    url: '',
    loading: false,
    state: void 0,
    states: {
      "default": 0,
      nav_url: 1,
      hist_back: 2,
      hist_forward: 3,
      nav_tree: 4,
      nav_browser: 5
    },
    updateTree: function(node) {
      switch (this.state) {
        case this.states.nav_url:
          this.get('tree').send('newRoot', {
            url: node.url,
            title: node.title
          });
          return this.state = this.states["default"];
        case this.states.hist_back:
          if (node.url !== this.get('url')) {
            this.get('tree').send('historyPush');
            return this.state = this.states["default"];
          }
          break;
        case this.states.hist_forward:
          this.get('tree').send('historyPop');
          return this.state = this.states["default"];
        case this.states.nav_tree:
          return this.state = this.states["default"];
        case this.states.nav_browser:
          return this.state = this.states["default"];
        default:
          this.get('tree').send('advance', {
            url: node.url,
            title: node.title
          });
          return this.state = this.states["default"];
      }
    },
    actions: {

      /*
       * User instigated events - UI elements
       * These set @state which is handled above
       */
      navigateUrl: function() {
        this.set('state', this.states.nav_url);
        return this.get('webview').navigate(this.get('url'));
      },
      navigateHistoryBack: function() {
        this.set('state', this.states.hist_back);
        return this.get('webview').navigateBack();
      },
      navigateHistoryForward: function() {
        this.set('state', this.states.hist_forward);
        return this.get('webview').navigateForward();
      },
      navigateReload: function() {
        return this.get('webview').reload();
      },
      navigateNode: function(url) {
        this.set('state', this.states.nav_tree);
        return this.get('webview').navigate(url);
      },
      historyShow: function() {
        this.set('loading', false);
        $('#tb-pane-alt').show();
        $('.tb-navigation-element-main').hide();
        return $('.tb-navigation-element-alt').show(0, (function(_this) {
          return function() {
            return _this.get('tree').send('drawTree');
          };
        })(this));
      },
      browserShow: function() {
        $('#tb-pane-alt').hide();
        $('.tb-navigation-element-main').show();
        return $('.tb-navigation-element-alt').hide();
      },

      /*
       * Filtered <webview> instigated events
       */
      loadCommit: function(e) {
        this.updateTree(e.originalEvent);
        console.log(this.get('tree').get('currentNode'), this.get('state'));
        return this.set('url', e.originalEvent.url);
      },
      loadRedirect: function(e) {
        return this.set('url', e.originalEvent.url);
      },
      newWindow: function(e) {
        return this.get('tree').send('newChild', {
          url: e.originalEvent.targetUrl,
          title: e.originalEvent.targetUrl
        });
      }
    }
  });

}).call(this);

(function() {
  Twingl.TreeController = Ember.Controller.extend({
    needs: ['application', 'navigation'],
    application: Ember.computed.alias("controllers.application"),
    navigation: Ember.computed.alias("controllers.navigation"),
    resetState: function() {
      this.set('currentNode', {});
      this.set('historyStack', []);
      return this.set('curretnNodeId', 0);
    },
    currentNode: {},
    historyStack: [],
    currentNodeId: 0,

    /*
     * A sample node structure
     *
     * {
     *   id: ID,
     *   root: Boolean, //Indicates if the item is a root item or direct child
     *   parent: ID,
     *   children: [ ... ],
     *   visited: [
     *     {
     *       start: Date,
     *       finish: Date,
     *       idle: Boolean
     *     },
     *     ...
     *   ],
     *   url: String,
     *   created_at: Date
     * }
     * {
     *   id: ID,
     *   url: String,
     *   title: String,
     *   arrived_at: Date,
     *   departed_at: Date,
     *   idle: Boolean
     * }
     */
    historyTree: void 0,
    d3data: {
      svg: void 0,
      height: 800,
      width: 600,
      tree: d3.layout.tree().size([800, 600]),
      diagonal: d3.svg.diagonal().projection(function(d) {
        return [d.y, d.x];
      })
    },
    update: function() {
      var link, links, node, nodeEnter, nodes;
      nodes = this.get('d3data').tree.nodes(this.get('historyTree')).reverse();
      links = this.get('d3data').tree.links(nodes);
      node = this.get('d3data').svg.selectAll('g.node').data(nodes, function(d) {
        return d.id;
      });
      nodeEnter = node.enter().append("g").attr("class", "node").attr("transform", function(d) {
        return "translate(" + d.y + ", " + d.x + ")";
      }).on("click", (function(_this) {
        return function(d) {
          _this.set('currentNode', d);
          return _this.get('navigation').send('navigateNode', d.url);
        };
      })(this));
      nodeEnter.append("circle").attr("r", "4px").style("fill", "red");
      nodeEnter.append("text").attr("x", -10).attr("dy", ".35em").attr("text-anchor", "end").text(function(d) {
        return d.title;
      });
      link = this.get('d3data').svg.selectAll("path.link").data(links, function(d) {
        return d.target.id;
      });
      return link.enter().insert("path", "g").attr("class", "link").attr("d", this.get('d3data').diagonal);
    },
    actions: {
      drawTree: function() {
        document.getElementById('tb-history-tree-viz').innerHTML = '';
        this.get('d3data').svg = d3.select('#tb-history-tree-viz').append('svg');
        if (this.get('historyTree')) {
          this.update();
          return svgPanZoom.init({
            'selector': '#tb-history-tree-viz>svg'
          });
        }
      },
      newRoot: function(obj) {
        var node, _base;
        node = {
          id: ++this.currentNodeId,
          root: true,
          parent: void 0,
          children: [],
          visited: [
            {
              start: Date.now(),
              finish: void 0,
              idle: false
            }
          ],
          url: obj.url,
          title: obj.title,
          created_at: Date.now()
        };
        if (!this.get('historyTree')) {
          this.set('historyTree', node);
          this.set('currentNode', node);
          return console.log("New Root! " + obj.url);
        } else {
          node.parent = this.get('currentNode');
          (_base = this.get('currentNode')).children || (_base.children = []);
          this.get('currentNode').children.push(node);
          this.set('currentNode', node);
          return console.log("Creating new pseudo-root node: " + obj.url);
        }
      },
      newChild: function(obj) {
        var node, _base;
        (_base = this.get('currentNode')).children || (_base.children = []);
        if (this.get('currentNode').children.filterBy('url', obj.url).length === 0) {
          node = {
            id: ++this.currentNodeId,
            root: false,
            parent: this.get('currentNode'),
            children: [],
            visited: [],
            url: obj.url,
            title: obj.title,
            created_at: Date.now()
          };
          this.get('currentNode').children.push(node);
          return console.log("Creating child node: " + obj.url);
        } else {
          return console.log("Child node exists: " + obj.url);
        }
      },
      advance: function(obj) {
        var node, _base, _base1;
        (_base = this.get('currentNode')).children || (_base.children = []);
        if (this.get('currentNode').children.filterBy('url', obj.url).length === 0) {
          node = {
            id: ++this.currentNodeId,
            root: false,
            parent: this.get('currentNode'),
            children: [],
            visited: [
              {
                start: Date.now(),
                finish: void 0,
                idle: false
              }
            ],
            url: obj.url,
            title: obj.title,
            created_at: Date.now()
          };
          (_base1 = this.get('currentNode')).children || (_base1.children = []);
          this.get('currentNode').children.push(node);
          this.set('currentNode', node);
          return console.log("Advancing to new node: " + obj.url);
        } else {
          node = this.get('currentNode').children.filterBy('url', obj.url).pop();
          node.visited.push({
            start: Date.now(),
            finish: void 0,
            idle: false
          });
          this.set('currentNode', node);
          return console.log("Advancing to existing node: " + obj.url);
        }
      },
      historyPop: function() {
        var p;
        p = this.get('historyStack').pop();
        if (p) {
          this.set('currentNode', p);
          return console.log("Pop - moving forward one node");
        } else {
          return console.log("ohfuck no history to go to");
        }
      },
      historyPush: function() {
        var p;
        p = this.get('currentNode').parent;
        if (p) {
          this.get('historyStack').push(this.get('currentNode'));
          this.set('currentNode', p);
          return console.log("Push - moving back one node");
        } else {
          return console.log("ohfuck no parent");
        }
      }
    }
  });

}).call(this);

(function() {
  Twingl.WebviewController = Ember.Controller.extend({

    /*
     * This Controller is responsible for actioning navigation events and catching
     * the events emitted by the <webview>, filtering, and bubbling on appropriate
     * events to NavigationController so that it can manage the state effectively.
     */
    needs: ['navigation', 'tree'],
    navigation: Ember.computed.alias("controllers.navigation"),
    resetState: function() {
      return this.set('url', '');
    },
    currentNode: Ember.computed.alias("controllers.tree.currentNode"),
    url: '',
    navigate: function(url) {
      return this.set('url', url);
    },
    navigateForward: function() {
      return $('webview')[0].forward();
    },
    navigateBack: function() {
      return $('webview')[0].back();
    },
    reload: function() {
      return $('webview')[0].reload();
    },
    actions: {
      loadStart: function(e) {
        console.log("loadstart");
        return this.get('navigation').set('loading', true);
      },
      loadStop: function(e) {
        console.log("loadstop");
        return this.get('navigation').set('loading', false);
      },
      loadRedirect: function(e) {
        if (e.originalEvent.isTopLevel) {
          return this.get('navigation').send('loadRedirect', e);
        }
      },
      loadCommit: function(e) {
        if (e.originalEvent.isTopLevel && this.get('currentNode').url !== e.originalEvent.url) {
          return $('webview')[0].executeScript({
            code: "document.title"
          }, (function(_this) {
            return function(r) {
              document.title = r[0];
              e.originalEvent.title = r[0];
              return _this.get('navigation').send('loadCommit', e);
            };
          })(this));
        }
      },
      newWindow: function(e) {
        return this.get('navigation').send('newWindow', e);
      }
    }
  });

}).call(this);

(function() {
  Twingl.AssignmentListItem = Ember.Component.extend({
    tagName: 'li',
    classNames: [],
    action: "setAssignment",
    layoutName: "main/assignments/list_item",
    click: function() {
      return this.sendAction('action', this.assignment);
    }
  });

}).call(this);

(function() {
  Twingl.AssignmentSwitcher = Ember.Component.extend({
    tagName: "button",
    classNames: ["tb-assignment-switch", "tb-window-nav"],
    action: "showAssignments",
    layoutName: "windowNavigation/assignment_switcher",
    click: function() {
      return this.sendAction();
    }
  });

}).call(this);

(function() {
  Twingl.BrowserShowButton = Ember.Component.extend({
    tagName: "i",
    classNames: ["tb-browser-show", "tb-nav-button", "fa", "fa-arrow-left"],
    action: "browserShow",
    click: function() {
      return this.sendAction();
    }
  });

}).call(this);

(function() {
  Twingl.HistoryBackButton = Ember.Component.extend({
    tagName: 'button',
    classNames: ['t-history-back', 't-nav-button'],
    action: "navigateHistoryBack",
    layoutName: "button",
    text: "Back",
    click: function() {
      return this.sendAction();
    }
  });

}).call(this);

(function() {
  Twingl.HistoryForwardButton = Ember.Component.extend({
    tagName: 'button',
    classNames: ['tb-history-forward', 'tb-nav-button'],
    action: "navigateHistoryForward",
    layoutName: "button",
    text: "Forward",
    click: function() {
      return this.sendAction();
    }
  });

}).call(this);

(function() {
  Twingl.HistoryReloadButton = Ember.Component.extend({
    tagName: 'button',
    classNames: ['tb-history-reload', 'tb-nav-button'],
    action: "navigateReload",
    layoutName: "button",
    text: "Reload",
    click: function() {
      return this.sendAction();
    }
  });

}).call(this);

(function() {
  Twingl.HistoryShowButton = Ember.Component.extend({
    tagName: "i",
    classNames: ["tb-history-show", "tb-nav-button", "fa", "fa-share-alt"],
    action: "historyShow",
    click: function() {
      return this.sendAction();
    }
  });

}).call(this);

(function() {
  Twingl.LogoutButton = Ember.Component.extend({
    tagName: "i",
    classNames: ["tb-auth-logout", "tb-nav-button", "fa", "fa-sign-out"],
    action: "invalidateSession",
    click: function() {
      return this.sendAction();
    }
  });

}).call(this);

(function() {
  Twingl.SearchButton = Ember.Component.extend({
    tagName: "i",
    classNames: ["tb-search-show", "tb-nav-button", "fa", "fa-search"],
    action: "navigateSearch",
    click: function() {
      return this.sendAction();
    }
  });

}).call(this);

(function() {
  Twingl.UrlSubmitButton = Ember.Component.extend({
    tagName: 'button',
    classNames: ['tb-url-submit', 'tb-nav-button'],
    action: "navigateUrl",
    layoutName: "button",
    text: "Go",
    click: function() {
      return this.sendAction();
    }
  });

}).call(this);

(function() {
  Twingl.UrlTextField = Ember.TextField.extend({
    classNames: ['tb-url-input'],
    placeholder: 'http://example.com',
    action: "navigateUrl",
    attributeBindings: ['value'],
    insertNewline: function() {
      return this.sendAction();
    }
  });

}).call(this);

(function() {
  Twingl.Webview = Ember.View.extend({
    tagName: 'webview',
    attributeBindings: ['src'],
    webviewLoadCommit: function(evt) {
      return this.get('controller').send('loadCommit', evt);
    },
    webviewLoadRedirect: function(evt) {
      return this.get('controller').send('loadRedirect', evt);
    },
    webviewLoadStart: function(evt) {
      return this.get('controller').send('loadStart', evt);
    },
    webviewLoadStop: function(evt) {
      return this.get('controller').send('loadStop', evt);
    },
    webviewNewWindow: function(evt) {
      return this.get('controller').send('newWindow', evt);
    }
  });

}).call(this);

(function() {
  Twingl.WindowCloseButton = Ember.Component.extend({
    tagName: "i",
    classNames: ["tb-window-close", "tb-window-control", "fa", "fa-times"],
    action: "closeWindow",
    click: function() {
      return this.sendAction();
    }
  });

}).call(this);

(function() {
  Twingl.WindowMaximizeButton = Ember.Component.extend({
    tagName: "i",
    classNames: ["tb-window-maximize", "tb-window-control", "fa", "fa-plus"],
    action: "maximizeWindow",
    click: function() {
      return this.sendAction();
    }
  });

}).call(this);

(function() {
  Twingl.WindowMinimizeButton = Ember.Component.extend({
    tagName: "i",
    classNames: ["tb-window-minimize", "tb-window-control", "fa", "fa-minus"],
    action: "minimizeWindow",
    click: function() {
      return this.sendAction();
    }
  });

}).call(this);

(function() {
  Twingl.ApplicationRoute = Ember.Route.extend(SimpleAuth.ApplicationRouteMixin, {
    actions: {
      sessionAuthenticationSucceeded: function() {
        console.log("logged in");
        return this.transitionTo('assignments');
      },
      sessionAuthenticationFailed: function(error) {
        return console.log("failed to log in", error);
      },
      authorizationFailed: function(error) {
        return console.log("failed to authorize", error);
      },
      sessionInvalidationSucceeded: function() {
        console.log("logged out");
        return this.get('controller').send('resetState');
      },
      sessionInvalidationFailed: function(error) {
        return console.log("failed to log out", error);
      }
    }
  });

}).call(this);

(function() {
  Twingl.AssignmentsRoute = Ember.Route.extend(SimpleAuth.AuthenticatedRouteMixin, {
    model: function() {
      return this.store.findAll('assignment');
    },
    renderTemplate: function() {
      this.render('main/assignments/index', {
        outlet: 'main',
        controller: 'assignments'
      });
      return this.render('navigation/assignments', {
        outlet: 'navigation',
        controller: 'navigation'
      });
    }
  });

}).call(this);

(function() {
  Twingl.BrowserRoute = Ember.Route.extend(SimpleAuth.AuthenticatedRouteMixin, {
    renderTemplate: function() {
      this.render('main/webview', {
        outlet: 'main',
        controller: 'webview'
      });
      this.render('navigation/browser', {
        outlet: 'navigation',
        controller: 'navigation'
      });
      this.render('alt/tree', {
        outlet: 'alt',
        controller: 'tree'
      });
      return this.render('windowNavigation/projects', {
        outlet: 'windowNavigation',
        controller: 'application'
      });
    }
  });

}).call(this);

(function() {
  Twingl.IndexRoute = Ember.Route.extend({
    beforeModel: function() {
      return this.transitionTo('login');
    }
  });

}).call(this);

(function() {
  Twingl.LoginRoute = Ember.Route.extend({
    renderTemplate: function() {
      return this.render('main/auth/login', {
        outlet: 'main',
        controller: 'login'
      });
    }
  });

}).call(this);

(function() {
  Twingl.Router.map(function() {
    this.route('login');
    this.route('browser');
    return this.route('assignments');
  });

}).call(this);

(function() {


}).call(this);
